# OSINT CLI Toolkit — Project Specification (Textual UI)

## 🔥 Overview
A terminal-based OSINT reconnaissance toolkit built for Kali Linux using Python. It utilizes `textual` and `rich` for an interactive UI, and leverages standard CLI tools such as `theHarvester`, `dnsrecon`, `whois`, and `nmap`. Results are stored in an SQLite-backed session for review and export.

---

## 📦 Technology Stack

### Core Libraries
- Python 3.9+
- [`textual`](https://github.com/Textualize/textual) — terminal user interface
- [`rich`](https://github.com/Textualize/rich) — text formatting and tables
- `sqlite3` — built-in database for persistent session data
- `subprocess` — to run CLI tools
- `uv` — project and dependency management

---

## 🧱 Project Structure

```
osint_script/
├── pyproject.toml
├── .venv/                   # uv virtual environment
├── main.py                  # Entry point with Textual app
├── ui/                      # Textual widgets & layouts
│   ├── menu.py
│   ├── output_view.py
│   └── session_view.py
├── tools/                   # Tool runners
│   ├── harvester_runner.py
│   ├── dns_runner.py
│   ├── whois_runner.py
│   └── nmap_runner.py
├── utils/
│   ├── db.py                # SQLite session manager
│   └── parsers.py           # Helper functions to parse output
├── reporting/
│   └── report_generator.py
├── results/                 # Raw tool outputs
├── session/
│   └── session.db
└── report.md                # Final exported report
```

---

## ⚙️ Feature Requirements

### 1. Main Menu UI
- Powered by `Textual`
- Navigation via arrow keys
- Options:
  - Run theHarvester
  - Run DNS Enumeration
  - Run WHOIS Lookup
  - Run Nmap Scan
  - Review Current Session Data
  - Export Report (Markdown/Text)
  - Exit

### 2. Session Tracking (SQLite)
- Tables:
  - `emails`, `domains`, `subdomains`, `ips`, `dns_records`, `whois_data`, `nmap_results`
- Every tool result gets parsed and saved to DB
- Deduplication of entries

### 3. Tool Integration
Each tool gets a module in `tools/` with:
- A method to run the subprocess
- Parser to extract useful info
- Export of raw output to `results/`
- Insertion into `session.db`

#### Supported Tools
- `theHarvester`: emails, domains, subdomains, IPs
- `dnsrecon`: A, MX, NS, CNAME, TXT
- `whois`: Registrant/org info, IP range
- `nmap`: Ports, services, versions

### 4. Data Review
- Panel within Textual UI to browse:
  - Emails
  - Subdomains
  - IPs
  - DNS records
  - WHOIS info
  - Nmap services

### 5. Report Generation
- `report_generator.py` pulls data from DB
- Generates:
  - `report.md`
  - `report.txt`
- Structured by tool sections
- Markdown version includes Rich-style formatting if piped

---

## 📋 UV Project Configuration

### `pyproject.toml`
```toml
[project]
name = "osint-cli-toolkit"
version = "0.1.0"
description = "Textual-based OSINT CLI toolkit for Kali Linux"
authors = [{ name = "Your Name", email = "you@example.com" }]
requires-python = ">=3.9"

[project.dependencies]
textual = "*"
rich = "*"
sqlite-utils = "*"
```

### Setup
```bash
uv venv
source .venv/bin/activate
uv pip install textual rich sqlite-utils
```

---

## 🧪 Development Workflow

1. Start with `main.py`: Textual app loop and menu logic
2. Build reusable widgets: Menu, OutputViewer, SessionReview
3. Develop `db.py` to manage session storage
4. Build `harvester_runner.py` to run & parse output
5. Repeat for DNS, WHOIS, Nmap
6. Implement `report_generator.py`
7. Tie everything together in the Textual UI

---

## ✅ Optional Future Enhancements
- Integration with `recon-ng`
- Email breach checking
- Google Dorking panel (manual input)
- GitHub repo scraping (via `git clone`)
- Pastebin/raw text leak checks
- Threaded scanning with loading indicators
